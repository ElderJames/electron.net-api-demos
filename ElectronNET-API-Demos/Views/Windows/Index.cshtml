<template class="task-template">
    <section id="windows-section" class="section js-section u-category-windows">
        <header class="section-header">
            <div class="section-wrapper">
                <h1>
                    <svg class="section-icon"><use xlink:href="assets/img/icons.svg#icon-windows"></use></svg>
                    创建并管理窗口
                </h1>
                <h3>Electron.NET中的<code>Electron.WindowManager</code>允许您创建一个新的浏览器窗口或管理一个现有的浏览器窗口。</h3>

                <p>每个浏览器窗口都是一个单独的进程，称为渲染进程。这个进程，就像一个主进程一样控制应用程序的生命周期，有完全的权限访问.NET Core和Node.js API。

                <p>您可以在<code>Controllers\WindowsController.cs</code>找到示例源代码。</p>
            </div>
        </header>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="new-window-demo-toggle" class="js-container-target demo-toggle-button">
                    创建一个窗口
                    <div class="demo-meta u-avoid-clicks">支持：Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程：Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="new-window">查看实例</button>
                    </div>
                    <p><code>Electron.WindowManager</code>给您在应用程序中创建一个新窗口的能力。这个主进程可以通过有<code>Electron.IpcMain</code>的渲染进程来使用，正如演示中所示。</p>

                    <p>在创建新窗口时，有很多选项，有一些在这个示例中，如需查看完整的列表请访问<a href="http://electron.atom.io/docs/api/browser-window">文档<span class="u-visible-to-screen-reader">（在新窗口打开）</span></a>。</p>
                    <h5>主进程（C#）</h5>
                    <pre><code class="csharp">await Electron.WindowManager.CreateWindowAsync();</code></pre>

                    <div class="demo-protip">
                        <h2>ProTip</h2>
                        <strong>使用一个看不见的浏览器窗口来运行后台任务。</strong>
                        <p>为了使用额外的渲染进程作为一种新的线程来在你的应用程序中运行C#，您可以设置一个新的浏览器窗口为不展示（变成看不见）。您可以通过在定义新窗口时设置<code>show</code>属性为<code>false</code>来做得这一点。</p>
                        <pre>
<code class="csharp">
public async void ElectronBootstrap()
{
    var browserWindow = await Electron.WindowManager.CreateWindowAsync(new BrowserWindowOptions
    {
        Show = false
    });

    browserWindow.OnReadyToShow += () => browserWindow.Show();
}
</code></pre>
                    </div>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="manage-window-demo-toggle" class="js-container-target demo-toggle-button">
                    管理窗口状态
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span>线程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="manage-window">查看实例</button>
                        <span class="demo-response" id="manage-window-reply"></span>
                    </div>
                    <p>在这个演示中，我们创建了一个新窗口，并侦听它的<code>OnMove</code>和<code>OnResize</code>事件，点击演示按钮，改变新窗口，并查看上面的尺寸和位置更新。</p>
                    <p>有很多方法可以控制窗口的状态，比如大小、位置、焦点状态以及监听窗口变化的事件。访问<a href="http://electron.atom.io/docs/api/browser-window">文档<span class="u-visible-to-screen-reader">（在新窗口打开）</span></a>来了解完整的列表。</p>
                    <h5>主进程（C#）</h5>
                    <pre><code class="csharp">public IActionResult Index()
{
    Electron.IpcMain.On("manage-window", async (args) => {

        var browserWindow = await Electron.WindowManager.CreateWindowAsync();
        browserWindow.OnMove += UpdateReply;
        browserWindow.OnResize += UpdateReply;
    });

    return View();
}

private async void UpdateReply()
{
    var browserWindow = Electron.WindowManager.BrowserWindows.Last();
    var size = await browserWindow.GetSizeAsync();
    var position = await browserWindow.GetPositionAsync();
    string message = $"Size: {size[0]},{size[1]} Position: {position[0]},{position[1]}";

    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    Electron.IpcMain.Send(mainWindow, "manage-window-reply", message);
}</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="using-window-events-demo-toggle" class="js-container-target demo-toggle-button">
                    窗口事件：聚焦和失焦
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 线程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="listen-to-window">查看示例</button>
                        <button class="demo-button disappear" id="focus-on-modal-window">聚焦在示例</button>
                    </div>
                    <p>在这个示例中，我们创建了一个新窗口，并监听它的<code>OnBlur</code>事件。点击实例按钮来创建一个新的模态窗口，并通过点击将焦点切换回父窗口。你可以点击<i>聚焦在示例</i>按钮再次将焦点切换到模态窗口。</p>
                    <h5>主进程（C#）</h5>
                    <pre><code class="csharp">var mainBrowserWindow = Electron.WindowManager.BrowserWindows.First();

var browserWindow = await Electron.WindowManager.CreateWindowAsync();
browserWindow.OnFocus += () => Electron.IpcMain.Send(mainBrowserWindow, "listen-to-window-focus");
browserWindow.OnBlur += () => Electron.IpcMain.Send(mainBrowserWindow, "listen-to-window-blur");

Electron.IpcMain.On("listen-to-window-set-focus", (x) => browserWindow.Focus());</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button class="js-container-target demo-toggle-button">
                    创建一个无边框的窗口
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span>进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="frameless-window">查看示例</button>
                    </div>
                    <p>
                        一个无边框窗口就是一个没有<a href="https://developer.mozilla.org/en-US/docs/Glossary/Chrome">“壳”</a>的窗口，
                        比如工具栏、标题栏、状态栏、边框等等，您可以通过设置
                        <code>Frame</code>为<code>false</code>来创建一个无边框的浏览器窗口。
                    </p>

                    <h5>主进程</h5>
                    <pre><code class="csharp">var options = new BrowserWindowOptions
{
    Frame = false
};
await Electron.WindowManager.CreateWindowAsync(options);</code></pre>

                    <p>窗口也可以拥有透明的背景，通过设置<code>Transparent</code>选项为<code>true</code>，您也可以将您的无边框窗口变成透明：</p>
                    <pre>
<code class="csharp">var options = new BrowserWindowOptions
{
    Frame = false,
    Transparent = true
};
await Electron.WindowManager.CreateWindowAsync(options);</code></pre>

                    <p>
                        想了解更多详情，请查看<a href="http://electron.atom.io/docs/api/frameless-window/">无边框窗口</a>的文档。
                    </p>
                </div>
            </div>
        </div>

        <script>
            (function () {
                const { ipcRenderer } = require("electron");

                document.getElementById("new-window").addEventListener("click", () => {
                    ipcRenderer.send("new-window");
                });

                document.getElementById("manage-window").addEventListener("click", () => {
                    ipcRenderer.send("manage-window");
                });

                ipcRenderer.on("manage-window-reply", (sender, data) => {
                    document.getElementById("manage-window-reply").innerText = data;
                });

                document.getElementById("listen-to-window").addEventListener("click", () => {
                    ipcRenderer.send("listen-to-window");
                });

                document.getElementById('focus-on-modal-window').addEventListener("click", () => {
                    ipcRenderer.send("listen-to-window-set-focus");
                });

                ipcRenderer.on("listen-to-window-focus", (sender, data) => {
                    const focusModalBtn = document.getElementById('focus-on-modal-window');
                    focusModalBtn.classList.add('disappear');
                    focusModalBtn.classList.remove('smooth-appear');
                });

                ipcRenderer.on("listen-to-window-blur", (sender, data) => {
                    const focusModalBtn = document.getElementById('focus-on-modal-window');
                    focusModalBtn.classList.add('smooth-appear');
                    focusModalBtn.classList.remove('disappear');
                });

                document.getElementById('frameless-window').addEventListener("click", () => {
                    ipcRenderer.send("frameless-window");
                });
            }());
        </script>
    </section>
</template>